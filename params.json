{"name":"Pafy","tagline":"Python API for YouTube - Download videos and retrieve metadata from YouTube","body":"Features\r\n--------\r\n\r\n- Retreive metadata such as viewcount, duration, rating, author, thumbnail, keywords\r\n- Download video or audio at requested resolution / bitrate / format / filesize\r\n- Command line tool (ytdl) for downloading directly from the command line\r\n- Retrieve the URL to stream the video in a player such as vlc or mplayer\r\n- Works with age-restricted videos and non-embeddable videos\r\n- Small, standalone, single importable module file (pafy.py)\r\n- Select highest quality stream for download or streaming\r\n- Download audio only (no video) in ogg or m4a format\r\n- Download video only (no audio) in m4v format\r\n- Works with Python 2.7 and 3.x\r\n- No dependencies\r\n\r\n\r\nDocumentation\r\n-------------\r\n\r\nFull documentation is available at `pythonhosted.org\r\n<http://pythonhosted.org/Pafy/code.html/>`_\r\n\r\nUsage Examples\r\n--------------\r\n\r\nHere is how to use the module in your own python code.  For command line tool\r\n(ytdl) instructions, see further below::\r\n\r\n    >>> import pafy\r\n\r\ncreate a video instance from a YouTube url::\r\n\r\n    >>> url = \"http://www.youtube.com/watch?v=cyMHZVT91Dw\"\r\n    >>> video = pafy.new(url)\r\n\r\nget certain attributes::\r\n    \r\n    >>> video.title\r\n    u'Rick Astley Sings Live - Never Gonna Give You Up - This Morning'\r\n\r\n\r\n    >>> video.rating\r\n    4.93608852755\r\n\r\n    >>> video.length\r\n    355\r\n\r\ndisplay video metadata::\r\n\r\n    >>> print video\r\n\r\n    Title: Rick Astley Sings Live - Never Gonna Give You Up - This Morning\r\n    Author: Ryan915\r\n    ID: cyMHZVT91Dw\r\n    Duration: 00:05:55\r\n    Rating: 4.93608852755\r\n    Views: 672583\r\n    Thumbnail: https://i1.ytimg.com/vi/cyMHZVT91Dw/default.jpg\r\n    Keywords: Rick, Astley, Sings, Live, on, This, Morning, Never, Gonna, You...  \r\n\r\nshow regular formats for a video (video files with audio)::\r\n\r\n    >>> streams = video.streams\r\n    >>> for s in streams:\r\n    >>>     print s.resolution, s.extension\r\n\r\n    480x854 webm\r\n    480x854 flv\r\n    360x640 webm\r\n    360x640 flv\r\n    360x640 mp4\r\n    240x400 flv\r\n    320x240 3gp\r\n    144x176 3gp\r\n\r\n\r\nshow all formats, file-sizes and their download url::\r\n\r\n    >>> for s in streams:\r\n    >>>     print s.resolution, s.extension, s.get_filesize(), s.url\r\n\r\n    480x854 webm 56858674 http://r12--sn-aoh8kier.c.youtube.com/videoplayback?expire=1369...\r\n    480x854 flv 53066081 http://r11---sn-aoh8kier.c.youtube.com/videoplayback?expire=1369...\r\n    360x640 webm 34775366 http://r11---sn-aoh8kier.c.youtube.com/videoplayback?expire=1369...\r\n    360x640 flv 32737100 http://r11---sn-aoh8kier.c.youtube.com/videoplayback?expire=1369...\r\n    360x640 mp4 25919932 http://r11---sn-aoh8kier.c.youtube.com/videoplayback?expire=1369...\r\n    240x400 flv 14341366 http://r11---sn-aoh8kier.c.youtube.com/videoplayback?expire=1369...\r\n    320x240 3gp 11083585 http://r11---sn-aoh8kier.c.youtube.com/videoplayback?expire=1369...\r\n    144x176 3gp 3891135 http://r11---sn-aoh8kier.c.youtube.com/videoplayback?expire=1369...\r\n\r\n\r\nget best resolution regardless of file format::\r\n\r\n    >>> best = video.getbest()\r\n    >>> best.resolution, best.extension\r\n\r\n    ('480x854', 'webm')\r\n\r\n\r\nget best resolution for a particular file format:\r\n(mp4, webm, flv or 3gp)::\r\n\r\n    >>> best = video.getbest(preftype=\"mp4\")\r\n    >>> best.resolution, best.extension\r\n\r\n    ('360x640', 'mp4')\r\n\r\n\r\nget best resolution for a particular file format, or return\r\ndifferent format if it has the best resolution::\r\n\r\n    >>> best = video.getbest(preftype=\"mp4\", ftypestrict=False)\r\n    >>> best.resolution, best.extension\r\n\r\n    ('480x854', 'webm')\r\n\r\n\r\nget url, for download or streaming in mplayer / vlc etc::\r\n    \r\n    >>> best.url\r\n\r\n    'http://r12---sn-aig7kner.c.youtube.com/videoplayback?expire=1369...\r\n\r\n\r\nDownload video and show progress::\r\n\r\n    >>> best.download(quiet=False)\r\n    -Downloading 'Rick Astley Sings Live - Never Gonna Give You Up - This Morning.webm' [56,858,674 Bytes]\r\n\r\n      56,858,674 Bytes [100.00%] received. Rate: [ 720 kbps].  ETA: [0 secs]    \r\n    Done\r\n\r\n\r\nDownload video, use specific filepath::\r\n\r\n    >>> myfilename = \"/tmp/\" + best.title + \".\" + best.extension\r\n    >>> best.download(filepath=myfilename)\r\n\r\n\r\nGet audio-only streams (m4a and/or ogg vorbis)\r\n(use video.videostreams to get video-only streams)::\r\n\r\n    >>> audiostreams = video.audiostreams\r\n    >>> for a in audiostreams:\r\n    >>>     print(a.quality, a.extension, a.get_filesize())\r\n\r\n    ('48k', 'm4a', 2109164)\r\n    ('128k', 'm4a', 5630839)\r\n    ('256k', 'm4a', 11302824)\r\n\r\n\r\nDownload the 3rd audio stream from the above list::\r\n\r\n    >>> audiostreams[2].download()\r\n\r\nGet the best quality audio stream::\r\n\r\n    >>> bestaudio = video.getbestaudio()\r\n    >>> bestaudio.bitrate\r\n\r\n    '256k'\r\n\r\n\r\nDownload the best quality audio file::\r\n\r\n    >>> bestaudio.download()\r\n\r\nshow ALL formats for a video (video+audio, video-only and audio-only)::\r\n\r\n    >>> allstreams = video.allstreams\r\n    >>> for s in allstreams:\r\n    >>>     print(s.quality, s.extension, s.mediatype)\r\n\r\n    ('1280x720', 'mp4', 'a/v')\r\n    ('640x360', 'webm', 'a/v')\r\n    ('640x360', 'mp4', 'a/v')\r\n    ('320x240', 'flv', 'a/v')\r\n    ('320x240', '3gp', 'a/v')\r\n    ('176x144', '3gp', 'a/v')\r\n    ('1920x1080', 'm4v', 'video')\r\n    ('1280x720', 'm4v', 'video')\r\n    ('854x480', 'm4v', 'video')\r\n    ('640x360', 'm4v', 'video')\r\n    ('426x240', 'm4v', 'video')\r\n    ('256x144', 'm4v', 'video')\r\n    ('48k', 'm4a', 'audio')\r\n    ('128k', 'm4a', 'audio')\r\n    ('256k', 'm4a', 'audio')\r\n    ('128k', 'ogg', 'audio')\r\n    ('256k', 'ogg', 'audio')\r\n\r\n\r\n\r\nCommand Line Tool (ytdl) Usage\r\n------------------------------\r\n\r\n\r\n::\r\n\r\n    usage: ytdl [-h] [-i] [-s]\r\n                [-t {audio,video,normal,all} [{audio,video,normal,all} ...]]\r\n                [-n N] [-b] [-a]\r\n                url\r\n\r\n    YouTube Download Tool\r\n\r\n    positional arguments:\r\n      url                   YouTube video URL to download\r\n\r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      -i                    Display vid info\r\n      -s                    Display available streams\r\n      -t {audio,video,normal,all} [{audio,video,normal,all} ...]\r\n                            Stream types to display\r\n      -n N                  Specify stream to download by stream number (use -s to\r\n                            list available streams)\r\n      -b                    Download the best quality video (ignores -n)\r\n      -a                    Download the best quality audio (ignores -n)\r\n\r\n\r\nYTDL Examples\r\n-------------\r\n\r\nDownload best available resolution (-b)::\r\n\r\n    ytdl \"http://www.youtube.com/watch?v=cyMHZVT91Dw\" -b\r\n\r\n\r\nDownload best available audio stream (-a):\r\n(note; the full url is not required, just the video id will suffice)::\r\n\r\n    ytdl cyMHZVT91Dw -a\r\n\r\n\r\nget video info (-i)::\r\n\r\n    ytdl cyMHZVT91Dw -i\r\n\r\nlist available dowload streams::\r\n\r\n    ytdl cyMHZVT91Dw\r\n \r\n    Stream Type    Format Quality         Size            \r\n    ------ ----    ------ -------         ----            \r\n    1      normal  webm   [640x360]       33 MB           \r\n    2      normal  mp4    [640x360]       24 MB           \r\n    3      normal  flv    [320x240]       13 MB           \r\n    4      normal  3gp    [320x240]       10 MB           \r\n    5      normal  3gp    [176x144]        3 MB           \r\n    6      audio   m4a    [48k]            2 MB           \r\n    7      audio   m4a    [128k]           5 MB           \r\n    8      audio   m4a    [256k]          10 MB     \r\n\r\n \r\nDownload mp4 640x360 (ie. stream number 2)::\r\n\r\n    ytdl cyMHZVT91Dw -n2\r\n\r\nDownload m4a audio stream at 256k bitrate::\r\n\r\n    ytdl cyMHZVT91Dw -n8\r\n\r\n\r\n","google":"UA-41778544-1","note":"Don't delete this file! It's used internally to help with page regeneration."}