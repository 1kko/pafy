{"name":"Pafy","tagline":"Python API for YouTube - Download videos and retrieve metadata from YouTube","body":"[![Versuib](http://badge.fury.io/py/Pafy.png)](https://pypi.python.org/pypi/Pafy)\r\n[![Downloads](https://pypip.in/d/Pafy/badge.png)](https://pypi.python.org/pypi/Pafy)\r\n[![Coverage Status](https://coveralls.io/repos/np1/pafy/badge.png?branch=master)](https://coveralls.io/r/np1/pafy?branch=master)\r\n[![Build Status](https://travis-ci.org/np1/pafy.svg?branch=master)](https://travis-ci.org/np1/pafy)\r\n[![Wheen Status](https://pypip.in/wheel/Pafy/badge.png)](http://pythonwheels.com/)\r\n\r\nFeatures\r\n--------\r\n\r\n- Retreive metadata such as viewcount, duration, rating, author, thumbnail, keywords\r\n- Download video or audio at requested resolution / bitrate / format / filesize\r\n- Command line tool (ytdl) for downloading directly from the command line\r\n- Retrieve the URL to stream the video in a player such as vlc or mplayer\r\n- Works with age-restricted videos and non-embeddable videos\r\n- Small, standalone, single importable module file (pafy.py)\r\n- Select highest quality stream for download or streaming\r\n- Download audio only (no video) in ogg or m4a format\r\n- Download video only (no audio) in m4v format\r\n- Retreive playlists and playlist metadata\r\n- Works with Python 2.6+ and 3.3+\r\n- No dependencies\r\n\r\n\r\nDocumentation\r\n-------------\r\n\r\nFull documentation is available at http://pythonhosted.org/Pafy\r\n\r\n\r\nUsage Examples\r\n--------------\r\n\r\nHere is how to use the module in your own python code.  For command line tool\r\n(ytdl) instructions, see further below:\r\n\r\n    >>> import pafy\r\n\r\ncreate a video instance from a YouTube url:\r\n\r\n    >>> url = \"https://www.youtube.com/watch?v=bMt47wvK6u0\"\r\n    >>> video = pafy.new(url)\r\n\r\nget certain attributes:\r\n\r\n    >>> video.title\r\n    'Richard Jones: Introduction to game programming - PyCon 2014'\r\n\r\n    >>> video.rating\r\n    5.0\r\n\r\n    >>> video.viewcount, video.author, video.length\r\n    (1916, 'PyCon 2014', 10394)\r\n\r\n    >>> video.duration, video.likes, video.dislikes\r\n    ('02:53:14', 25, 0)\r\n\r\n    >>> print(video.description)\r\n    Speaker: Richard Jones\r\n\r\n    This tutorial will walk the attendees through development of a simple game using PyGame with time left over for some experimentation and exploration of different types of games.\r\n\r\n    Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides\r\n\r\n\r\nlist available streams for a video:\r\n\r\n    >>> streams = video.streams\r\n    >>> for s in streams:\r\n    ...     print(s)\r\n    ...\r\n    normal:mp4@1280x720\r\n    normal:webm@640x360\r\n    normal:mp4@640x360\r\n    normal:flv@320x240\r\n    normal:3gp@320x240\r\n    normal:3gp@176x144\r\n\r\n\r\nshow all formats, file-sizes and their download url:\r\n\r\n    >>> for s in streams:\r\n    ...    print(s.resolution, s.extension, s.get_filesize(), s.url)\r\n    ...\r\n    1280x720 mp4 2421958510 https://r1---sn-aiglln7e.googlevideo.com/videoplayba[...]\r\n    640x360 webm 547015732 https://r1---sn-aiglln7e.googlevideo.com/videoplaybac[...]\r\n    640x360 mp4 470655850 https://r1---sn-aiglln7e.googlevideo.com/videoplayback[...]\r\n    320x240 flv 345455674 https://r1---sn-aiglln7e.googlevideo.com/videoplayback[...]\r\n    320x240 3gp 208603447 https://r1---sn-aiglln7e.googlevideo.com/videoplayback[...]\r\n    176x144 3gp 60905732 https://r1---sn-aiglln7e.googlevideo.com/videoplayback?[...]\r\n\r\n\r\nget best resolution regardless of file format:\r\n\r\n    >>> best = video.getbest()\r\n    >>> best.resolution, best.extension\r\n    ('1280x720', 'mp4')\r\n\r\n\r\nget best resolution for a particular file format\r\n(mp4, webm, flv or 3gp):\r\n\r\n    >>> best = video.getbest(preftype=\"webm\")\r\n    >>> best.resolution, best.extension\r\n    ('640x360', 'webm')\r\n\r\nget url, for download or streaming in mplayer / vlc etc:\r\n\r\n    >>> best.url\r\n    'http://r12---sn-aig7kner.c.youtube.com/videoplayback?expire=1369...\r\n\r\nDownload video and show progress:\r\n\r\n    >>> best.download(quiet=False)\r\n    3,734,976 Bytes [0.20%] received. Rate: [ 719 KB/s].  ETA: [3284 secs]\r\n\r\nDownload video, use specific filepath:\r\n\r\n    >>> filename = best.download(filepath=\"/tmp/\")\r\n\r\n\r\nGet audio-only streams (m4a and/or ogg vorbis):\r\n\r\n    >>> audiostreams = video.audiostreams\r\n    >>> for a in audiostreams:\r\n    ...     print(a.bitrate, a.extension, a.get_filesize())\r\n    ...\r\n    128k m4a 165076649\r\n    128k ogg 108981120\r\n\r\n\r\nDownload the 2nd audio stream from the above list:\r\n\r\n    >>> audiostreams[1].download()\r\n\r\nGet the best quality audio stream:\r\n\r\n    >>> bestaudio = video.getbestaudio()\r\n    >>> bestaudio.bitrate\r\n    '128k'\r\n\r\nDownload the best quality audio file:\r\n\r\n    >>> bestaudio.download()\r\n\r\nshow ALL formats for a video (video+audio, video-only and audio-only):\r\n\r\n    >>> allstreams = video.allstreams\r\n    >>> for s in allstreams:\r\n    ...     print(s.mediatype, s.extension, s.quality)\r\n    ...\r\n    normal mp4 1280x720\r\n    normal webm 640x360\r\n    normal mp4 640x360\r\n    normal flv 320x240\r\n    normal 3gp 320x240\r\n    normal 3gp 176x144\r\n    video m4v 1280x720\r\n    video webm 720x480\r\n    video m4v 854x480\r\n    video webm 640x480\r\n    video m4v 640x360\r\n    video webm 480x360\r\n    video m4v 426x240\r\n    video webm 360x240\r\n    video m4v 256x144\r\n    audio m4a 128k\r\n    audio ogg 128k\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nPafy can be installed using [pip](http://www.pip-installer.org):\r\n\r\n    $ [sudo] pip install pafy\r\n\r\nor use a [virtualenv](http://virtualenv.org) if you don't want to install it system-wide:\r\n\r\n    $ virtualenv venv\r\n    $ source venv/bin/activate\r\n    $ pip install pafy\r\n\r\n\r\nAlternatively you can just grab the [pafy.py](https://raw.githubusercontent.com/np1/pafy/master/pafy/pafy.py) file and import it in your python code:\r\n\r\n    wget https://raw.githubusercontent.com/np1/pafy/master/pafy/pafy.py\r\n\r\n\r\nCommand Line Tool (ytdl) Usage\r\n------------------------------\r\n\r\n    usage: ytdl [-h] [-i] [-s]\r\n                [-t {audio,video,normal,all} [{audio,video,normal,all} ...]]\r\n                [-n N] [-b] [-a]\r\n                url\r\n\r\n    YouTube Download Tool\r\n\r\n    positional arguments:\r\n      url                   YouTube video URL to download\r\n\r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      -i                    Display vid info\r\n      -s                    Display available streams\r\n      -t {audio,video,normal,all} [{audio,video,normal,all} ...]\r\n                            Stream types to display\r\n      -n N                  Specify stream to download by stream number (use -s to\r\n                            list available streams)\r\n      -b                    Download the best quality video (ignores -n)\r\n      -a                    Download the best quality audio (ignores -n)\r\n\r\n\r\nytdl Examples\r\n-------------\r\n\r\nDownload best available resolution (-b):\r\n\r\n    $ ytdl -b \"http://www.youtube.com/watch?v=cyMHZVT91Dw\"\r\n\r\nDownload best available audio stream (-a)\r\n(note; the full url is not required, just the video id will suffice):\r\n\r\n    $ ytdl -a cyMHZVT91Dw\r\n\r\n\r\nget video info (-i):\r\n\r\n    $ ytdl -i cyMHZVT91Dw\r\n\r\nlist available dowload streams:\r\n\r\n    $ ytdl cyMHZVT91Dw\r\n \r\n    Stream Type    Format Quality         Size            \r\n    ------ ----    ------ -------         ----            \r\n    1      normal  webm   [640x360]       33 MB           \r\n    2      normal  mp4    [640x360]       24 MB           \r\n    3      normal  flv    [320x240]       13 MB           \r\n    4      normal  3gp    [320x240]       10 MB           \r\n    5      normal  3gp    [176x144]        3 MB           \r\n    6      audio   m4a    [48k]            2 MB           \r\n    7      audio   m4a    [128k]           5 MB           \r\n    8      audio   m4a    [256k]          10 MB     \r\n\r\n \r\nDownload mp4 640x360 (ie. stream number 2):\r\n\r\n    $ ytdl -n2 cyMHZVT91Dw\r\n\r\nDownload m4a audio stream at 256k bitrate:\r\n\r\n    $ ytdl -n8 cyMHZVT91Dw","google":"UA-41778544-1","note":"Don't delete this file! It's used internally to help with page regeneration."}